import requests

def encode_cp(cp: int) -> bytes:
    if cp < 0x80:
        return bytes([cp])
    elif cp < 0x800:
        return bytes([
            0xC0 | (cp >> 6),
            0x80 | (cp & 0x3F)
        ])
    elif cp < 0x10000:
        return bytes([
            0xE0 | (cp >> 12),
            0x80 | ((cp >> 6) & 0x3F),
            0x80 | (cp & 0x3F)
        ])
    elif cp <= 0x10FFFF:
        return bytes([
            0xF0 | (cp >> 18),
            0x80 | ((cp >> 12) & 0x3F),
            0x80 | ((cp >> 6) & 0x3F),
            0x80 | (cp & 0x3F)
        ])
    else:
        return encode_cp(0xFFFD)

def wasm_encode(input_bytes: bytes) -> bytes:
    output = bytearray()
    for b in input_bytes:
        cp = b + 0x1F4C0
        output.extend(encode_cp(cp))
    output.append(0)
    return bytes(output)

def get_flag(encoded_bytes: bytes) -> str:
    url = "https://wasm-reverse-web.2024-bq.ctfcompetition.com/flag.txt"
    # POST encoded bytes excluding the trailing null
    response = requests.post(url, data=encoded_bytes[:-1], headers={"Content-Type": "application/octet-stream"})
    return response.text

if __name__ == "__main__":
    # Download input.txt as raw bytes
    input_url = "https://wasm-reverse-web.2024-bq.ctfcompetition.com/input.txt"
    response = requests.get(input_url)
    input_bytes = response.content
    print(f"Input bytes (hex): {input_bytes.hex()}")

    encoded = wasm_encode(input_bytes)
    print(f"Encoded key (hex): {encoded.hex()}")

    flag = get_flag(encoded)
    print("Your Flag: ")
    print(flag)
